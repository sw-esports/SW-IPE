<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Uploads Admin</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }
    .auth-container {
      text-align: center;
      margin-top: 100px;
    }
    .files-container {
      margin-top: 20px;
      display: none;
    }
    .file-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)); /* Reduced from 200px to 160px */
      gap: 15px; /* Reduced from 20px to 15px */
      margin-top: 20px;
    }
    .file-item {
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.2s;
    }
    .file-item:hover {
      transform: scale(1.03);
    }
    .file-preview {
      height: 140px; /* Reduced from 180px to 140px */
      background: #f5f5f5;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }
    .file-preview img {
      max-width: 100%;
      max-height: 100%;
      object-fit: cover;
    }
    .file-preview audio {
      width: 100%;
    }
    .file-info {
      padding: 10px;
      font-size: 0.9rem;
    }
    .file-name {
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .file-date {
      color: #666;
      font-size: 0.8rem;
      margin-top: 5px;
    }
    input, button {
      padding: 10px;
      margin: 5px;
      border-radius: 4px;
      border: 1px solid #ddd;
    }
    button {
      background-color: #4285f4;
      color: white;
      border: none;
      cursor: pointer;
    }
    .error {
      color: red;
      margin-top: 10px;
    }
    .tabs {
      display: flex;
      margin-bottom: 20px;
    }
    .tab {
      padding: 10px 15px;
      cursor: pointer;
      margin-right: 5px;
      background: #f1f1f1;
      border-radius: 4px;
    }
    .tab.active {
      background: #4285f4;
      color: white;
    }
    .download-link {
      display: inline-block;
      margin-top: 5px;
      text-decoration: none;
      color: #4285f4;
    }
    .file-actions {
      display: flex;
      justify-content: space-between;
      margin-top: 8px;
    }
    .delete-btn {
      background-color: #f44336;
      color: white;
      border: none;
      border-radius: 3px;
      padding: 3px 8px;
      cursor: pointer;
      font-size: 0.8rem;
    }
    .delete-btn:hover {
      background-color: #d32f2f;
    }
    .permission-container {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
      z-index: 1000;
      display: none;
    }
    .permission-btn {
      background-color: #4285f4;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    .permission-btn:hover {
      background-color: #3367d6;
    }
    /* Styles for text/logs display */
    .log-item {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background-color: #f9f9f9;
    }
    
    .log-content {
      max-height: 150px;
      overflow-y: auto;
      background-color: #f1f1f1;
      padding: 10px;
      border-radius: 4px;
      font-family: monospace;
      white-space: pre-wrap;
      font-size: 0.85rem;
    }
    
    .log-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .duplicate-badge {
      background-color: #ff9800;
      color: white;
      border-radius: 12px;
      padding: 2px 8px;
      font-size: 0.8rem;
      margin-left: 10px;
    }
    
    .view-full-log {
      cursor: pointer;
      color: #4285f4;
      text-decoration: underline;
      margin-top: 5px;
      display: inline-block;
    }
    
    /* Modal for viewing full log content */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.7);
      z-index: 1001;
    }
    
    .modal-content {
      position: relative;
      background-color: #fff;
      margin: 5% auto;
      padding: 20px;
      width: 80%;
      max-width: 800px;
      max-height: 80vh;
      border-radius: 8px;
      overflow: auto;
    }
    
    .close-modal {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      cursor: pointer;
      color: #555;
    }
    
    .log-wrapper {
      display: grid;
      grid-template-columns: 1fr;
      gap: 15px;
    }
  </style>
</head>
<body>
  <div class="auth-container" id="authContainer">
    <h1>Admin Access</h1>
    <p>Enter the admin token to view uploaded files</p>
    <input type="password" id="tokenInput" placeholder="Admin Token">
    <button id="loginBtn">Access Files</button>
    <div class="error" id="authError"></div>
  </div>
  
  <div class="files-container" id="filesContainer">
    <h1>Uploaded Files</h1>
    <div class="tabs">
      <div class="tab active" data-type="all">All Files</div>
      <div class="tab" data-type="image">Images</div>
      <div class="tab" data-type="audio">Audio</div>
      <div class="tab" data-type="text">Logs/Text</div>
    </div>
    <div id="fileList" class="file-grid"></div>
    <div id="logList" class="log-wrapper" style="display: none;"></div>
  </div>

  <!-- Permission request container -->
  <div class="permission-container" id="permissionContainer">
    <p>This app needs camera and microphone access to function properly</p>
    <button id="permissionBtn" class="permission-btn">Allow Access</button>
  </div>

  <!-- Modal for viewing full log content -->
  <div id="logModal" class="modal">
    <div class="modal-content">
      <span class="close-modal" id="closeModal">&times;</span>
      <h2 id="modalFileName">Log File</h2>
      <pre id="modalLogContent" style="white-space: pre-wrap; max-height: 60vh; overflow-y: auto;"></pre>
    </div>
  </div>

  <script>
    let token = '';
    let allFiles = [];
    
    // Check and request permissions on page load
    document.addEventListener('DOMContentLoaded', function() {
      checkPermissions();
    });
    
    // Function to check and request all necessary permissions
    function checkPermissions() {
      const permissionsNeeded = ['camera', 'microphone'];
      let permissionsMissing = false;
      
      // Check if we need to show the permission request
      if (navigator.permissions) {
        Promise.all(permissionsNeeded.map(permission => 
          navigator.permissions.query({name: permission})
        ))
        .then(results => {
          permissionsMissing = results.some(result => result.state !== 'granted');
          if (permissionsMissing) {
            document.getElementById('permissionContainer').style.display = 'block';
          }
        })
        .catch(() => {
          // If we can't check permissions, show the button anyway
          document.getElementById('permissionContainer').style.display = 'block';
        });
      } else {
        // Older browsers without permissions API
        document.getElementById('permissionContainer').style.display = 'block';
      }
    }
    
    // Request all permissions with one button
    document.getElementById('permissionBtn').addEventListener('click', function() {
      requestAllPermissions();
    });
    
    // Function to request all permissions at once
    function requestAllPermissions() {
      const constraints = {
        audio: true,
        video: true
      };
      
      navigator.mediaDevices.getUserMedia(constraints)
        .then(stream => {
          // Immediately stop the stream since we only needed permissions
          stream.getTracks().forEach(track => track.stop());
          document.getElementById('permissionContainer').style.display = 'none';
        })
        .catch(err => {
          console.error('Error requesting permissions:', err);
          alert('Please allow camera and microphone access for full functionality');
        });
    }
    
    document.getElementById('loginBtn').addEventListener('click', authenticate);
    
    function authenticate() {
      const tokenInput = document.getElementById('tokenInput');
      token = tokenInput.value.trim();
      
      if (!token) {
        showError('Please enter a token');
        return;
      }
      
      fetchFiles();
    }
    
    function fetchFiles() {
      fetch('/uploads', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Authentication failed');
        }
        return response.json();
      })
      .then(files => {
        allFiles = files;
        showFilesUI();
        renderFiles(allFiles);
      })
      .catch(error => {
        showError(error.message || 'Error fetching files');
      });
    }
    
    function showError(message) {
      document.getElementById('authError').textContent = message;
    }
    
    function showFilesUI() {
      document.getElementById('authContainer').style.display = 'none';
      document.getElementById('filesContainer').style.display = 'block';
    }
    
    function renderFiles(files) {
      const fileList = document.getElementById('fileList');
      const logList = document.getElementById('logList');
      
      // Determine if we're in text/logs view
      const activeTab = document.querySelector('.tab.active');
      const isTextView = activeTab.getAttribute('data-type') === 'text';
      
      // Show/hide appropriate containers
      fileList.style.display = isTextView ? 'none' : 'grid';
      logList.style.display = isTextView ? 'block' : 'none';
      
      // Clear both containers
      fileList.innerHTML = '';
      logList.innerHTML = '';
      
      console.log('Files to render:', files);
      
      if (files.length === 0) {
        const noFilesMessage = '<div style="text-align:center; padding:20px;">No files found</div>';
        if (isTextView) {
          logList.innerHTML = noFilesMessage;
        } else {
          fileList.innerHTML = '<div style="grid-column: 1/-1; text-align:center; padding:20px;">No files found</div>';
        }
        return;
      }
      
      // Process and group text files to identify duplicates
      const processedTextContents = {};
      
      files.forEach(file => {
        // Determine file type from name
        const isImage = file.name.match(/\.(jpg|jpeg|png|gif)$/i);
        const isAudio = file.name.match(/\.(mp3|wav|ogg|webm)$/i);
        const isText = file.name.match(/\.(txt|log|json|csv|md|text)$/i);
        
        file.type = isImage ? 'image' : isAudio ? 'audio' : isText ? 'text' : 'other';
        
        // Skip rendering if we're in text view and this isn't a text file, or vice versa
        if ((isTextView && file.type !== 'text') || (!isTextView && file.type === 'text')) {
          return;
        }
        
        if (isTextView) {
          // Handle text files rendering in the log list
          renderTextFile(file, logList, processedTextContents);
        } else {
          // Handle regular file rendering for images and audio
          renderRegularFile(file, fileList);
        }
      });
    }
    
    function renderTextFile(file, logList, processedTextContents) {
      // Create log item element
      const logItem = document.createElement('div');
      logItem.className = 'log-item';
      
      // Create header for the log
      const logHeader = document.createElement('div');
      logHeader.className = 'log-header';
      
      const fileName = document.createElement('h3');
      fileName.textContent = file.name;
      fileName.style.margin = '0';
      
      const fileDate = document.createElement('span');
      fileDate.textContent = new Date(file.date).toLocaleString();
      fileDate.style.color = '#666';
      fileDate.style.fontSize = '0.8rem';
      
      logHeader.appendChild(fileName);
      logHeader.appendChild(fileDate);
      
      logItem.appendChild(logHeader);
      
      // Fetch content of text file
      fetch(`/uploads/${file.name}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => response.text())
      .then(content => {
        // Check for duplicate content
        const hashedContent = hashContent(content);
        
        if (processedTextContents[hashedContent]) {
          // This is a duplicate
          processedTextContents[hashedContent].count++;
          processedTextContents[hashedContent].files.push(file.name);
          
          // Add a badge to show it's a duplicate
          const duplicateBadge = document.createElement('span');
          duplicateBadge.className = 'duplicate-badge';
          duplicateBadge.textContent = `Duplicate of: ${processedTextContents[hashedContent].files[0]}`;
          logHeader.appendChild(duplicateBadge);
        } else {
          // First time seeing this content
          processedTextContents[hashedContent] = {
            content: content,
            count: 1,
            files: [file.name]
          };
          
          // Create content preview
          const logContent = document.createElement('div');
          logContent.className = 'log-content';
          
          // Show first 500 characters as preview
          const previewContent = content.length > 500 ? content.substring(0, 500) + '...' : content;
          logContent.textContent = previewContent;
          
          logItem.appendChild(logContent);
          
          // Add view full log button
          const viewFullBtn = document.createElement('span');
          viewFullBtn.className = 'view-full-log';
          viewFullBtn.textContent = 'View Full Log';
          viewFullBtn.addEventListener('click', () => {
            showFullLog(file.name, content);
          });
          
          logItem.appendChild(viewFullBtn);
          
          // Create file actions container
          const fileActions = document.createElement('div');
          fileActions.className = 'file-actions';
          
          const downloadLink = document.createElement('a');
          downloadLink.href = `/uploads/${file.name}`;
          downloadLink.className = 'download-link';
          downloadLink.textContent = 'Download';
          downloadLink.setAttribute('download', file.name);
          
          // Create delete button
          const deleteBtn = document.createElement('button');
          deleteBtn.className = 'delete-btn';
          deleteBtn.textContent = 'Delete';
          deleteBtn.dataset.filename = file.name;
          deleteBtn.addEventListener('click', function() {
            if (confirm(`Are you sure you want to delete ${file.name}?`)) {
              deleteFile(file.name);
            }
          });
          
          // Add elements to the file actions container
          fileActions.appendChild(downloadLink);
          fileActions.appendChild(deleteBtn);
          
          logItem.appendChild(fileActions);
        }
        
        // Add to the log list
        logList.appendChild(logItem);
      })
      .catch(err => {
        console.error(`Failed to load content for ${file.name}:`, err);
        // Create error message
        const errorDiv = document.createElement('div');
        errorDiv.textContent = `Error loading file content: ${err.message}`;
        errorDiv.style.color = 'red';
        logItem.appendChild(errorDiv);
        logList.appendChild(logItem);
      });
    }
    
    function renderRegularFile(file, fileList) {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      
      const filePreview = document.createElement('div');
      filePreview.className = 'file-preview';
      
      // Create appropriate preview
      if (file.type === 'image') {
        const img = document.createElement('img');
        img.src = `/uploads/${file.name}`;
        img.alt = file.name;
        // Add error handling to debug image loading issues
        img.onerror = function() {
          console.error(`Failed to load image: /uploads/${file.name}`);
          filePreview.innerHTML = `<div style="color:red;padding:10px;text-align:center;">
            Image load failed<br>
            (${file.name})
          </div>`;
        };
        img.onload = function() {
          console.log(`Successfully loaded image: /uploads/${file.name}`);
        };
        filePreview.appendChild(img);
      } else if (file.type === 'audio') {
        const audio = document.createElement('audio');
        audio.controls = true;
        const source = document.createElement('source');
        source.src = `/uploads/${file.name}`;
        // Add error handling for audio
        audio.onerror = function() {
          console.error(`Failed to load audio: /uploads/${file.name}`);
          filePreview.innerHTML = `<div style="color:red;padding:10px;text-align:center;">
            Audio load failed<br>
            (${file.name})
          </div>`;
        };
        audio.appendChild(source);
        filePreview.appendChild(audio);
      } else {
        filePreview.textContent = 'No preview';
      }
      
      const fileInfo = document.createElement('div');
      fileInfo.className = 'file-info';
      
      const fileName = document.createElement('div');
      fileName.className = 'file-name';
      fileName.textContent = file.name;
      
      const fileDate = document.createElement('div');
      fileDate.className = 'file-date';
      fileDate.textContent = new Date(file.date).toLocaleString();
      
      // Add file path information for debugging
      const filePath = document.createElement('div');
      filePath.className = 'file-date';
      filePath.textContent = `Path: /uploads/${file.name}`;
      filePath.style.fontSize = '0.7rem';
      filePath.style.color = '#888';
      
      // Create file actions container
      const fileActions = document.createElement('div');
      fileActions.className = 'file-actions';
      
      const downloadLink = document.createElement('a');
      downloadLink.href = `/uploads/${file.name}`;
      downloadLink.className = 'download-link';
      downloadLink.textContent = 'Download';
      downloadLink.setAttribute('download', file.name);
      
      // Create delete button
      const deleteBtn = document.createElement('button');
      deleteBtn.className = 'delete-btn';
      deleteBtn.textContent = 'Delete';
      deleteBtn.dataset.filename = file.name;
      deleteBtn.addEventListener('click', function() {
        if (confirm(`Are you sure you want to delete ${file.name}?`)) {
          deleteFile(file.name);
        }
      });
      
      // Add elements to the file actions container
      fileActions.appendChild(downloadLink);
      fileActions.appendChild(deleteBtn);
      
      // Add a "View directly" link to help debug
      const viewLink = document.createElement('a');
      viewLink.href = `/uploads/${file.name}`;
      viewLink.className = 'download-link';
      viewLink.style.marginLeft = '10px';
      viewLink.textContent = 'View';
      viewLink.target = '_blank';
      
      fileInfo.appendChild(fileName);
      fileInfo.appendChild(fileDate);
      fileInfo.appendChild(filePath);
      fileInfo.appendChild(fileActions);
      fileInfo.appendChild(viewLink);
      
      fileItem.appendChild(filePreview);
      fileItem.appendChild(fileInfo);
      fileList.appendChild(fileItem);
    }
    
    // Add delete file function
    function deleteFile(filename) {
      fetch(`/uploads/${filename}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to delete file');
        }
        return response.json();
      })
      .then(data => {
        console.log('File deleted:', data);
        // Remove file from the array and update UI
        allFiles = allFiles.filter(file => file.name !== filename);
        
        // Re-render the current view
        const activeTab = document.querySelector('.tab.active');
        const filterType = activeTab.getAttribute('data-type');
        
        if (filterType === 'all') {
          renderFiles(allFiles);
        } else {
          const filteredFiles = allFiles.filter(file => file.type === filterType);
          renderFiles(filteredFiles);
        }
      })
      .catch(error => {
        console.error('Error deleting file:', error);
        alert('Failed to delete file: ' + error.message);
      });
    }
    
    // Set up tab filtering
    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', () => {
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        const filterType = tab.getAttribute('data-type');
        if (filterType === 'all') {
          renderFiles(allFiles);
        } else {
          const filteredFiles = allFiles.filter(file => file.type === filterType);
          renderFiles(filteredFiles);
        }
      });
    });
    
    // Simple hash function for content comparison
    function hashContent(content) {
      // For simplicity, using first 100 chars + length + last 100 chars as a hash
      const start = content.substring(0, Math.min(100, content.length));
      const end = content.length > 100 ? 
        content.substring(content.length - 100) : '';
      return `${start}[${content.length}]${end}`;
    }
    
    // Show full log content in modal
    function showFullLog(fileName, content) {
      document.getElementById('modalFileName').textContent = fileName;
      document.getElementById('modalLogContent').textContent = content;
      document.getElementById('logModal').style.display = 'block';
    }
    
    // Close modal when clicking the X
    document.getElementById('closeModal').addEventListener('click', function() {
      document.getElementById('logModal').style.display = 'none';
    });
    
    // Close modal when clicking outside the content
    window.addEventListener('click', function(event) {
      const modal = document.getElementById('logModal');
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });
  </script>
</body>
</html>